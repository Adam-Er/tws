

Terminals which are not used:

   LIT



Grammar
rule 1    spec -> defs MARK rules
rule 2    defs ->		/* empty */
rule 3    defs -> defs def
rule 4    def -> NODE nlist
rule 5    nlist -> yid
rule 6    nlist -> nlist yid
rule 7    nlist -> nlist ',' yid
rule 8    yid -> IDENTIFIER
rule 9    yid -> LITERAL
rule 10   rules -> rule
rule 11   rules -> rules rule
rule 12   rule -> IDENTIFIER OR rbody ';'
rule 13   rule -> IDENTIFIER OR rbody ACTION STRING ';'
rule 14   rule -> IDENTIFIER OR rbody or ';'
rule 15   rule -> IDENTIFIER OR rbody ACTION STRING or ';'
rule 16   or -> OR rbody
rule 17   or -> OR rbody ACTION STRING
rule 18   or -> or OR rbody
rule 19   or -> or OR rbody ACTION STRING
rule 20   rbody ->		/* empty */
rule 21   rbody -> rexp
rule 22   rexp -> term
rule 23   rexp -> PIPE term
rule 24   rexp -> rexp PIPE term
rule 25   term -> fact
rule 26   term -> term fact
rule 27   fact -> prim
rule 28   fact -> prim rop
rule 29   prim -> yid
rule 30   prim -> '(' rexp ')'
rule 31   rop -> PLUS
rule 32   rop -> STAR
rule 33   rop -> QUESTION
rule 34   rop -> LIST prim

Terminals, with rules where they appear

$ (-1)
'(' (40) 30
')' (41) 30
',' (44) 7
';' (59) 12 13 14 15
error (256)
MARK (258) 1
NODE (259) 4
OR (260) 12 13 14 15 16 17 18 19
LIST (261) 34
ACTION (262) 13 15 17 19
IDENTIFIER (263) 8 12 13 14 15
LITERAL (264) 9
STRING (265) 13 15 17 19
LIT (266)
PIPE (267) 23 24
STAR (268) 32
PLUS (269) 31
QUESTION (270) 33

Nonterminals, with rules where they appear

spec (20)
    on left: 1
defs (21)
    on left: 2 3, on right: 1 3
def (22)
    on left: 4, on right: 3
nlist (23)
    on left: 5 6 7, on right: 4 6 7
yid (24)
    on left: 8 9, on right: 5 6 7 29
rules (25)
    on left: 10 11, on right: 1 11
rule (26)
    on left: 12 13 14 15, on right: 10 11
or (27)
    on left: 16 17 18 19, on right: 14 15 18 19
rbody (28)
    on left: 20 21, on right: 12 13 14 15 16 17 18 19
rexp (29)
    on left: 22 23 24, on right: 21 24 30
term (30)
    on left: 25 26, on right: 22 23 24 26
fact (31)
    on left: 27 28, on right: 25 26
prim (32)
    on left: 29 30, on right: 27 28 34
rop (33)
    on left: 31 32 33 34, on right: 28


state 0

    $default	reduce using rule 2 (defs)

    spec	go to state 53
    defs	go to state 1



state 1

    spec  ->  defs . MARK rules   (rule 1)
    defs  ->  defs . def   (rule 3)

    MARK	shift, and go to state 2
    NODE	shift, and go to state 3

    def 	go to state 4



state 2

    spec  ->  defs MARK . rules   (rule 1)

    IDENTIFIER	shift, and go to state 5

    rules	go to state 6
    rule	go to state 7



state 3

    def  ->  NODE . nlist   (rule 4)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9

    nlist	go to state 10
    yid 	go to state 11



state 4

    defs  ->  defs def .   (rule 3)

    $default	reduce using rule 3 (defs)



state 5

    rule  ->  IDENTIFIER . OR rbody ';'   (rule 12)
    rule  ->  IDENTIFIER . OR rbody ACTION STRING ';'   (rule 13)
    rule  ->  IDENTIFIER . OR rbody or ';'   (rule 14)
    rule  ->  IDENTIFIER . OR rbody ACTION STRING or ';'   (rule 15)

    OR  	shift, and go to state 12



state 6

    spec  ->  defs MARK rules .   (rule 1)
    rules  ->  rules . rule   (rule 11)

    IDENTIFIER	shift, and go to state 5

    $default	reduce using rule 1 (spec)

    rule	go to state 13



state 7

    rules  ->  rule .   (rule 10)

    $default	reduce using rule 10 (rules)



state 8

    yid  ->  IDENTIFIER .   (rule 8)

    $default	reduce using rule 8 (yid)



state 9

    yid  ->  LITERAL .   (rule 9)

    $default	reduce using rule 9 (yid)



state 10

    def  ->  NODE nlist .   (rule 4)
    nlist  ->  nlist . yid   (rule 6)
    nlist  ->  nlist . ',' yid   (rule 7)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9
    ',' 	shift, and go to state 14

    $default	reduce using rule 4 (def)

    yid 	go to state 15



state 11

    nlist  ->  yid .   (rule 5)

    $default	reduce using rule 5 (nlist)



state 12

    rule  ->  IDENTIFIER OR . rbody ';'   (rule 12)
    rule  ->  IDENTIFIER OR . rbody ACTION STRING ';'   (rule 13)
    rule  ->  IDENTIFIER OR . rbody or ';'   (rule 14)
    rule  ->  IDENTIFIER OR . rbody ACTION STRING or ';'   (rule 15)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9
    PIPE	shift, and go to state 16
    '(' 	shift, and go to state 17

    $default	reduce using rule 20 (rbody)

    yid 	go to state 18
    rbody	go to state 19
    rexp	go to state 20
    term	go to state 21
    fact	go to state 22
    prim	go to state 23



state 13

    rules  ->  rules rule .   (rule 11)

    $default	reduce using rule 11 (rules)



state 14

    nlist  ->  nlist ',' . yid   (rule 7)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9

    yid 	go to state 24



state 15

    nlist  ->  nlist yid .   (rule 6)

    $default	reduce using rule 6 (nlist)



state 16

    rexp  ->  PIPE . term   (rule 23)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9
    '(' 	shift, and go to state 17

    yid 	go to state 18
    term	go to state 25
    fact	go to state 22
    prim	go to state 23



state 17

    prim  ->  '(' . rexp ')'   (rule 30)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9
    PIPE	shift, and go to state 16
    '(' 	shift, and go to state 17

    yid 	go to state 18
    rexp	go to state 26
    term	go to state 21
    fact	go to state 22
    prim	go to state 23



state 18

    prim  ->  yid .   (rule 29)

    $default	reduce using rule 29 (prim)



state 19

    rule  ->  IDENTIFIER OR rbody . ';'   (rule 12)
    rule  ->  IDENTIFIER OR rbody . ACTION STRING ';'   (rule 13)
    rule  ->  IDENTIFIER OR rbody . or ';'   (rule 14)
    rule  ->  IDENTIFIER OR rbody . ACTION STRING or ';'   (rule 15)

    OR  	shift, and go to state 27
    ACTION	shift, and go to state 28
    ';' 	shift, and go to state 29

    or  	go to state 30



state 20

    rbody  ->  rexp .   (rule 21)
    rexp  ->  rexp . PIPE term   (rule 24)

    PIPE	shift, and go to state 31

    $default	reduce using rule 21 (rbody)



state 21

    rexp  ->  term .   (rule 22)
    term  ->  term . fact   (rule 26)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9
    '(' 	shift, and go to state 17

    $default	reduce using rule 22 (rexp)

    yid 	go to state 18
    fact	go to state 32
    prim	go to state 23



state 22

    term  ->  fact .   (rule 25)

    $default	reduce using rule 25 (term)



state 23

    fact  ->  prim .   (rule 27)
    fact  ->  prim . rop   (rule 28)

    LIST	shift, and go to state 33
    STAR	shift, and go to state 34
    PLUS	shift, and go to state 35
    QUESTION	shift, and go to state 36

    $default	reduce using rule 27 (fact)

    rop 	go to state 37



state 24

    nlist  ->  nlist ',' yid .   (rule 7)

    $default	reduce using rule 7 (nlist)



state 25

    rexp  ->  PIPE term .   (rule 23)
    term  ->  term . fact   (rule 26)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9
    '(' 	shift, and go to state 17

    $default	reduce using rule 23 (rexp)

    yid 	go to state 18
    fact	go to state 32
    prim	go to state 23



state 26

    rexp  ->  rexp . PIPE term   (rule 24)
    prim  ->  '(' rexp . ')'   (rule 30)

    PIPE	shift, and go to state 31
    ')' 	shift, and go to state 38



state 27

    or  ->  OR . rbody   (rule 16)
    or  ->  OR . rbody ACTION STRING   (rule 17)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9
    PIPE	shift, and go to state 16
    '(' 	shift, and go to state 17

    $default	reduce using rule 20 (rbody)

    yid 	go to state 18
    rbody	go to state 39
    rexp	go to state 20
    term	go to state 21
    fact	go to state 22
    prim	go to state 23



state 28

    rule  ->  IDENTIFIER OR rbody ACTION . STRING ';'   (rule 13)
    rule  ->  IDENTIFIER OR rbody ACTION . STRING or ';'   (rule 15)

    STRING	shift, and go to state 40



state 29

    rule  ->  IDENTIFIER OR rbody ';' .   (rule 12)

    $default	reduce using rule 12 (rule)



state 30

    rule  ->  IDENTIFIER OR rbody or . ';'   (rule 14)
    or  ->  or . OR rbody   (rule 18)
    or  ->  or . OR rbody ACTION STRING   (rule 19)

    OR  	shift, and go to state 41
    ';' 	shift, and go to state 42



state 31

    rexp  ->  rexp PIPE . term   (rule 24)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9
    '(' 	shift, and go to state 17

    yid 	go to state 18
    term	go to state 43
    fact	go to state 22
    prim	go to state 23



state 32

    term  ->  term fact .   (rule 26)

    $default	reduce using rule 26 (term)



state 33

    rop  ->  LIST . prim   (rule 34)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9
    '(' 	shift, and go to state 17

    yid 	go to state 18
    prim	go to state 44



state 34

    rop  ->  STAR .   (rule 32)

    $default	reduce using rule 32 (rop)



state 35

    rop  ->  PLUS .   (rule 31)

    $default	reduce using rule 31 (rop)



state 36

    rop  ->  QUESTION .   (rule 33)

    $default	reduce using rule 33 (rop)



state 37

    fact  ->  prim rop .   (rule 28)

    $default	reduce using rule 28 (fact)



state 38

    prim  ->  '(' rexp ')' .   (rule 30)

    $default	reduce using rule 30 (prim)



state 39

    or  ->  OR rbody .   (rule 16)
    or  ->  OR rbody . ACTION STRING   (rule 17)

    ACTION	shift, and go to state 45

    $default	reduce using rule 16 (or)



state 40

    rule  ->  IDENTIFIER OR rbody ACTION STRING . ';'   (rule 13)
    rule  ->  IDENTIFIER OR rbody ACTION STRING . or ';'   (rule 15)

    OR  	shift, and go to state 27
    ';' 	shift, and go to state 46

    or  	go to state 47



state 41

    or  ->  or OR . rbody   (rule 18)
    or  ->  or OR . rbody ACTION STRING   (rule 19)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9
    PIPE	shift, and go to state 16
    '(' 	shift, and go to state 17

    $default	reduce using rule 20 (rbody)

    yid 	go to state 18
    rbody	go to state 48
    rexp	go to state 20
    term	go to state 21
    fact	go to state 22
    prim	go to state 23



state 42

    rule  ->  IDENTIFIER OR rbody or ';' .   (rule 14)

    $default	reduce using rule 14 (rule)



state 43

    rexp  ->  rexp PIPE term .   (rule 24)
    term  ->  term . fact   (rule 26)

    IDENTIFIER	shift, and go to state 8
    LITERAL	shift, and go to state 9
    '(' 	shift, and go to state 17

    $default	reduce using rule 24 (rexp)

    yid 	go to state 18
    fact	go to state 32
    prim	go to state 23



state 44

    rop  ->  LIST prim .   (rule 34)

    $default	reduce using rule 34 (rop)



state 45

    or  ->  OR rbody ACTION . STRING   (rule 17)

    STRING	shift, and go to state 49



state 46

    rule  ->  IDENTIFIER OR rbody ACTION STRING ';' .   (rule 13)

    $default	reduce using rule 13 (rule)



state 47

    rule  ->  IDENTIFIER OR rbody ACTION STRING or . ';'   (rule 15)
    or  ->  or . OR rbody   (rule 18)
    or  ->  or . OR rbody ACTION STRING   (rule 19)

    OR  	shift, and go to state 41
    ';' 	shift, and go to state 50



state 48

    or  ->  or OR rbody .   (rule 18)
    or  ->  or OR rbody . ACTION STRING   (rule 19)

    ACTION	shift, and go to state 51

    $default	reduce using rule 18 (or)



state 49

    or  ->  OR rbody ACTION STRING .   (rule 17)

    $default	reduce using rule 17 (or)



state 50

    rule  ->  IDENTIFIER OR rbody ACTION STRING or ';' .   (rule 15)

    $default	reduce using rule 15 (rule)



state 51

    or  ->  or OR rbody ACTION . STRING   (rule 19)

    STRING	shift, and go to state 52



state 52

    or  ->  or OR rbody ACTION STRING .   (rule 19)

    $default	reduce using rule 19 (or)



state 53

    $   	go to state 54



state 54

    $   	go to state 55



state 55

    $default	accept
